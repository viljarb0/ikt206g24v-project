stages:
  - test
  - build
  - deploy-staging
  - deploy-production

variables:
  DOCKER_IMAGE: "${CI_REGISTRY_IMAGE}"
  KUBE_NAMESPACE_STAGING: "staging"
  KUBE_NAMESPACE_PROD: "production"
  KUBECONFIG: "/builds/kubeconfig"

test:
  stage: test
  image: python:3.11
  before_script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
  script:
    - pytest --cov=app --cov-report=term-missing --cov-report=xml

build_to_registry:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  script:
    - >
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${DOCKER_IMAGE}:${CI_COMMIT_SHA}"
      --destination "${DOCKER_IMAGE}:latest"
  only:
    - main
    - tags

deploy_to_staging:
  stage: deploy-staging
  image: bitnami/kubectl:latest
  before_script:
    - echo "$KUBE_CONFIG" | base64 -d > $KUBECONFIG
    - kubectl config use-context kind-kind
  script:
    - kubectl get nodes
    - kubectl -n $KUBE_NAMESPACE_STAGING set image deployment/flask flask=${DOCKER_IMAGE}:${CI_COMMIT_SHA}
    - kubectl rollout status deployment/flask -n $KUBE_NAMESPACE_STAGING --timeout=90s
  environment:
    name: staging
    url: http://flask-staging.local/
  only:
    - main

deploy-production:
  stage: deploy-production
  image: bitnami/kubectl:latest
  when: manual
  before_script:
    - echo "$KUBE_CONFIG" | base64 -d > $KUBECONFIG
    - kubectl config use-context kind-kind
  script:
    - kubectl get nodes
    - kubectl -n $KUBE_NAMESPACE_PROD set image deployment/flask flask=${DOCKER_IMAGE}:${CI_COMMIT_SHA}
    - kubectl rollout status deployment/flask -n $KUBE_NAMESPACE_PROD --timeout=120